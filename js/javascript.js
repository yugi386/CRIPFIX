/*--------------------------------------------------------------------------------------------CRIPFIX EM JAVASCRIPT--------------------------------------------------------------------------------------------CRIPTOGRAFIA EM JAVASCRIPTAUTOR: YUGIDATA: 24/06/2012--------------------------------------------------------------------------------------------*/function cripto() {	var form = document.getElementById("form");	var key = form.key.value;	var texto = form.msg.value;	if (texto.length == 0) {		alert("Não há texto para codificação!");		return;	}	if (key.length == 0) {		alert("Chave não informada!");		return;	}	var mkey = createKey(key);		//	cria chave de cifra		var xa, xb, xc, xd;	var ya, yb, yc, yd;	var criptext = "", pnum, crt;		while (true){		if (texto.length % 8 != 0){			texto += " "; 			} else {			break;		}	}	for (var ct=0;ct<texto.length;ct=ct+8){			// parte 1:		for (var crt=0;crt<=4;crt=crt+4){			pnum = retX(mkey[crt],mkey[crt+1]);			xa = pnum[0];			xb = pnum[1];						mkey[crt] = (mkey[crt] + xa + mkey[crt+2]) % 65536			mkey[crt+1] = (mkey[crt+1] + xb + mkey[crt+3]) % 65536			mkey[crt+2] = (mkey[crt+2] + mkey[crt+1]) % 65536			mkey[crt+3] = (mkey[crt+3] + mkey[crt]) % 65536						pnum = xPart(mkey[crt]);			xa = pnum[0];			xb = pnum[1];			pnum = xPart(mkey[crt+1]);			xc = pnum[0];			xd = pnum[1];						//  Codificação propriamente dita:			ya = xcod( cn(texto.charAt(ct + crt)), xa ); 			yb = xcod( cn(texto.charAt(ct + crt+1)), xb ); 			yc = xcod( cn(texto.charAt(ct + crt+2)), xc ); 			yd = xcod( cn(texto.charAt(ct + crt+3)), xd ); 						criptext += cc(ya) + cc(yb) + cc(yc) + cc(yd);		}				// Parte2:		var aux1, aux2;		aux1 = mkey[2];		aux2 = mkey[3];		mkey[2] = mkey[6] + 1;		mkey[3] = mkey[7] + 3;		mkey[6] = aux1 + 5;		mkey[7] = aux2 + 7;			}	// Carregando Form...		form.cmsg.value = criptext;		form.msg.value = "";		}// *****************************************************************************************function cn(sbyte) {	//	Retorna o código ASCII do caracter	return sbyte.charCodeAt(0);}// *****************************************************************************************function cc(snum) {		//	Retorna o caracter correspondente ao código ASCII	return String.fromCharCode(snum);}// *****************************************************************************************function createKey(key){	//	Gera a chave de cifra	while (true){		if (key.length < 16) {				key = key + " ";		} else {			break;		}		}	var vkey = new Array(8);	var ct2 = 0;	for (var ct=0;ct<16;ct=ct+2){		vkey[ct2] = (cn(key.charAt(ct+1)) * 256) + cn(key.charAt(ct));		ct2++;	}	return vkey;}	// *****************************************************************************************function retX(n1,n2){	//	função de difusão de dados...	n1 = n1 * n1;	n2 = n2 * n2;		n1 = String(n1);	n2 = String(n2);		while (true){		if (n1.length < 10) {				n1 = "0" + n1;		} else {			break;		}		}		while (true){		if (n2.length < 10) {				n2 = "0" + n2;		} else {			break;		}		}		var xword = n1 + n2;	var nkey = new Array(2);		nkey[0] = Number(xword.substr(5,5));	nkey[1] = Number(xword.substr(10,5));		return nkey;}// *****************************************************************************************function xPart(num){	//	Particiona 16 bits em 2 valores de 8 bits	var nkey = new Array(2);	nkey[0] = num % 256;	nkey[1] = (num - nkey[0]) / 256;	return nkey;}// *****************************************************************************************function xcod(n1,n2){	//	codificacao	var xret = (n1 + n2) % 256;	return xret;}// ******************************************************************************************