/*--------------------------------------------------------------------------------------------CRIPFIX EM JAVASCRIPT--------------------------------------------------------------------------------------------CRIPTOGRAFIA EM JAVASCRIPTAUTOR: YUGIDATA: 24/06/2012--------------------------------------------------------------------------------------------*/function cripto() {	var form = document.getElementById("form");	var key = form.key.value;	var texto = form.msg.value;	if (texto.length == 0) {		alert("Não há texto para codificação!");		return;	}	if (key.length == 0) {		alert("Chave não informada!");		return;	}	var mkey = createKey(key);		//	cria chave de cifra		var xa, xb, xc, xd;	var ya, yb, yc, yd;	var criptext = "";	for (var ct=0;ct<4;ct=ct+4){			var pnum = retX(mkey[0],mkey[1]);		xa = pnum[0];		xb = pnum[1];				mkey[0] = (mkey[0] + xa + mkey[2]) % 65536		mkey[1] = (mkey[1] + xb + mkey[3]) % 65536		mkey[2] = (mkey[2] + mkey[1]) % 65536		mkey[3] = (mkey[3] + mkey[0]) % 65536				pnum = xPart(mkey[0]);		xa = pnum[0];		xb = pnum[1];		pnum = xPart(mkey[1]);		xc = pnum[0];		xd = pnum[1];				//  Codificação propriamente dita:		ya = xcod( cn(texto.charAt(ct)), xa ); 		yb = xcod( cn(texto.charAt(ct+1)), xb ); 		yc = xcod( cn(texto.charAt(ct+2)), xc ); 		yd = xcod( cn(texto.charAt(ct+3)), xd ); 				criptext += cc(ya) + cc(yb) + cc(yc) + cc(yd);							}	form.cmsg.value = criptext;		}// *****************************************************************************************function cn(sbyte) {	//	Retorna o código ASCII do caracter	return sbyte.charCodeAt(0);}// *****************************************************************************************function cc(snum) {		//	Retorna o caracter correspondente ao código ASCII	return String.fromCharCode(snum);}// *****************************************************************************************function createKey(key){	//	Gera a chave de cifra	while (true){		if (key.length < 16) {				key = key + " ";		} else {			break;		}		}	var vkey = new Array(8);	var ct2 = 0;	for (var ct=0;ct<16;ct=ct+2){		vkey[ct2] = (cn(key.charAt(ct+1)) * 256) + cn(key.charAt(ct));		ct2++;	}	return vkey;}	// *****************************************************************************************function retX(n1,n2){	//	função de difusão de dados...	n1 = n1 * n1;	n2 = n2 * n2;		n1 = String(n1);	n2 = String(n2);		while (true){		if (n1.length < 10) {				n1 = "0" + n1;		} else {			break;		}		}		while (true){		if (n2.length < 10) {				n2 = "0" + n2;		} else {			break;		}		}		var xword = n1 + n2;	var nkey = new Array(2);		nkey[0] = Number(xword.substr(5,5));	nkey[1] = Number(xword.substr(10,5));		return nkey;}// *****************************************************************************************function xPart(num){	//	Particiona 16 bits em 2 valores de 8 bits	var nkey = new Array(2);	nkey[0] = num % 256;	nkey[1] = (num - nkey[0]) / 256;	return nkey;}// *****************************************************************************************function xcod(n1,n2){	//	codificacao	var xret = (n1 + n2) % 256;	return xret;}// ******************************************************************************************