/*--------------------------------------------------------------------------------------------CRIPFIX EM JAVASCRIPT--------------------------------------------------------------------------------------------CRIPTOGRAFIA EM JAVASCRIPTAUTOR: YUGIDATA: 24/06/2012--------------------------------------------------------------------------------------------*/function cripto(tipo) {	var form = document.getElementById("form");	var key = form.key.value;	if (tipo === 1) {	//	cifra		var texto = form.msg.value;	} else {			//	decifra		var texto = form.cmsg.value;		texto = hexadec(texto);	}		if (texto.length == 0) {		alert("Não há texto para codificação/decodificação!");		return;	}	if (key.length == 0) {		alert("Chave não informada!");		return;	}	var mkey = createKey(key);		//	cria chave de cifra		var xa, xb, xc, xd;	var ya, yb, yc, yd;	var criptext = "", pnum, crt;		while (tipo === 1){		if (texto.length % 8 != 0){			texto += " "; 			} else {			break;		}	}	for (var ct=0;ct<texto.length;ct=ct+8){			// parte 1:		for (var crt=0;crt<=4;crt=crt+4){			pnum = retX(mkey[crt],mkey[crt+1]);			xa = pnum[0];			xb = pnum[1];						mkey[crt] = (mkey[crt] + xa + mkey[crt+2]) % 65536			mkey[crt+1] = (mkey[crt+1] + xb + mkey[crt+3]) % 65536			mkey[crt+2] = (mkey[crt+2] + mkey[crt+1]) % 65536			mkey[crt+3] = (mkey[crt+3] + mkey[crt]) % 65536						pnum = xPart(mkey[crt]);			xa = pnum[0];			xb = pnum[1];			pnum = xPart(mkey[crt+1]);			xc = pnum[0];			xd = pnum[1];						//  Codificação propriamente dita:			ya = xcod( cn(texto.charAt(ct + crt)), xa, tipo ); 			yb = xcod( cn(texto.charAt(ct + crt+1)), xb, tipo ); 			yc = xcod( cn(texto.charAt(ct + crt+2)), xc, tipo ); 			yd = xcod( cn(texto.charAt(ct + crt+3)), xd, tipo ); 						criptext += cc(ya) + cc(yb) + cc(yc) + cc(yd);		}				// Parte2:		var aux1, aux2;		aux1 = mkey[2];		aux2 = mkey[3];		mkey[2] = mkey[6] + 1;		mkey[3] = mkey[7] + 3;		mkey[6] = aux1 + 5;		mkey[7] = aux2 + 7;			}		// Carregando Form...		if (tipo === 1){		form.cmsg.value = criptext;		form.cmsg.value = dechexa(criptext);		form.msg.value = "";		} else {			form.cmsg.value = "";			form.msg.value = criptext;		}	}// *****************************************************************************************function cn(sbyte) {	//	Retorna o código ASCII do caracter	return sbyte.charCodeAt(0);}// *****************************************************************************************function cc(snum) {		//	Retorna o caracter correspondente ao código ASCII	return String.fromCharCode(snum);}// *****************************************************************************************function createKey(key){	//	Gera a chave de cifra	while (true){		if (key.length < 16) {				key = key + " ";		} else {			break;		}		}	var vkey = new Array(8);	var ct2 = 0;	for (var ct=0;ct<16;ct=ct+2){		vkey[ct2] = (cn(key.charAt(ct+1)) * 256) + cn(key.charAt(ct));		ct2++;	}	return vkey;}	// *****************************************************************************************function retX(n1,n2){	//	função de difusão de dados...	n1 = n1 * n1;	n2 = n2 * n2;		n1 = String(n1);	n2 = String(n2);		while (true){		if (n1.length < 10) {				n1 = "0" + n1;		} else {			break;		}		}		while (true){		if (n2.length < 10) {				n2 = "0" + n2;		} else {			break;		}		}		var xword = n1 + n2;	var nkey = new Array(2);		nkey[0] = Number(xword.substr(5,5));	nkey[1] = Number(xword.substr(10,5));		return nkey;}// *****************************************************************************************function xPart(num){	//	Particiona 16 bits em 2 valores de 8 bits	var nkey = new Array(2);	nkey[0] = num % 256;	nkey[1] = (num - nkey[0]) / 256;	return nkey;}// *****************************************************************************************function xcod(n1,n2,tipo){	//	codificacao e decodificacao	var xret;		if (tipo === 1) {		xret = (n1 + n2) % 256;	} else {		xret = n1 - n2;		if (xret < 0){			xret += 256;		}	}		return xret;}// ******************************************************************************************function dechexa(text){	//	converte para padrao HEXA	var tam = text.length;	var newtext = "", n1, n2, xnum;		for (var ct=0;ct<tam;ct++){		xnum = cn(text.charAt(ct));		n1 = xnum % 16;		n2 = (xnum - n1) / 16;		// alert(n1 + " ||| " + n2);		newtext += transform(n2) + transform(n1);	}		return newtext;}// ******************************************************************************************function hexadec(text){		//	converte HEXA para decimal (texto)	var tam = text.length;	var newtext = "", n1, n2;		for (var ct=0;ct<tam;ct=ct+2){		n1 = transform2(text.charAt(ct));		n2 = transform2(text.charAt(ct+1));		n1 = (n1 * 16) + n2;		newtext += cc(n1);	}		return newtext;}// ******************************************************************************************function transform(num) {	if (num < 10) {		return String(num);	}	switch(num) {	case 10 :		return "a";		break;	case 11 :		return "b";		break;	case 12 :		return "c";		break;	case 13 :		return "d";		break;	case 14 :		return "e";		break;	case 15 :		return "f";		break;	}		}// ***************************************************************************************function transform2(text) {	switch(text) {	case "0" :		return 0;		break;	case "1" :		return 1;		break;	case "2" :		return 2;		break;	case "3" :		return 3;		break;	case "4":		return 4;		break;	case "5" :		return 5;		break;	case "6" :		return 6;		break;	case "7" :		return 7;		break;	case "8":		return 8;		break;	case "9" :		return 9;		break;	case "a" :		return 10;		break;	case "b" :		return 11;		break;	case "c" :		return 12;		break;	case "d" :		return 13;		break;	case "e" :		return 14;		break;	case "f" :		return 15;		break;	}		}